apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'androidx.navigation.safeargs.kotlin'

// the open cv native libs are added as a submodule to the repo, so that they are downloaded
// automatically.
def path_to_opencv_native = new File(getProjectDir(), "../opencv_libs/sdk/native")

android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion 31
    defaultConfig {
        applicationId "at.ac.tuwien.caa.docscan"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 167
        versionName "1.8.0"

//		this is used to show the build time in the AboutActivity
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
        // we need vectorDrawables.useSupportLibrary to get rid of this error:
//		References to other resources are not supported by build-time PNG generation
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner = 'androidx.test.runner.AndroidJUnitRunner'

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
//            Note this also effects externalNativeBuild.cmake, so we do not to define this anymore:
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        externalNativeBuild {
            cmake {
                // specify the path for the opencv native files and pass it to CMakeLists.txt as
                // argument
                arguments "-DPATH_TO_OPENCV_NATIVE:STRING=${path_to_opencv_native}"
            }
        }

        // export room schema
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    kotlinOptions {
        // Disabling coroutine's ExperimentalCoroutinesApi warning
        freeCompilerArgs += [
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        ]
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    // Specify tflite file should not be compressed for the app apk
    aaptOptions {
        noCompress "tflite"
    }

    ext.enableCrashlytics = true

    buildTypes {
        debug {
            versionNameSuffix ""
            applicationIdSuffix ""
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
        }
        preview {
            versionNameSuffix ""
            applicationIdSuffix ""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig debug.signingConfig
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//			Uncomment this line if you want to run a release configuration without signing:
            signingConfig debug.signingConfig
        }
    }

    flavorDimensions "version"

    productFlavors {
        // When building a variant that uses this flavor, the following configurations
        // override those in the defaultConfig block.
        dev {
//			applicationID "at.ac.tuwien.caa.docscan"
            dimension "version"
//			minSdkVersion 21
            versionNameSuffix "-dev"
//			applicationIdSuffix '.dev'
        }

        prod {
            // If you've configured the defaultConfig block for the release version of
            // your app, you can leave this block empty and Gradle uses configurations in
            // the defaultConfig block instead. You still need to create this flavor.
            // Otherwise, all variants use the "dev" flavor configurations.
            dimension "version"

        }
    }

    // Fixed build error : Duplicate files copied in APK META-INF/xxx
    packagingOptions {

        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }
    lintOptions {
        abortOnError false
    }

    useLibrary 'android.test.runner'

    testOptions {
        // Encapsulates options for local unit tests.
        unitTests {
            // By default, local unit tests throw an exception any time the code you are testing tries to access
            // Android platform APIs (unless you mock Android dependencies yourself or with a testing
            // framework like Mockito). However, you can enable the following property so that the test
            // returns either null or zero when accessing platform APIs, rather than throwing an exception.
            returnDefaultValues true

            // Encapsulates options for controlling how Gradle executes local unit tests. For a list
            // of all the options you can specify, read Gradle's reference documentation.
            all {
                // Sets JVM argument(s) for the test JVM(s).
                jvmArgs '-XX:MaxPermSize=256m'

                // You can also check the task name to apply options to only the tests you specify.
                if (it.name == 'testDebugUnitTest') {
                    systemProperty 'debug', 'true'
                }
            }
        }
    }

    buildFeatures {
        // enables support for tflite model import
        mlModelBinding true
        // enables support for databinding
        dataBinding true
        // enables viewbinding support
        viewBinding true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // tensorflow lite libs
    implementation 'org.tensorflow:tensorflow-lite-support:0.3.1'
    implementation 'org.tensorflow:tensorflow-lite-gpu:2.7.0'

    // koin - a lightweight dependency injection lib
    implementation "io.insert-koin:koin-android:$koin_version"
    // a compat lib only used for injecting viewModels in a java class
    implementation "io.insert-koin:koin-android-compat:$koin_version"

    // fragment/navigation ktx related libs
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.fragment:fragment:1.4.1'
    implementation 'androidx.activity:activity:1.4.0'
    implementation 'androidx.activity:activity-ktx:1.4.0'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    kapt 'androidx.annotation:annotation:1.3.0'
    implementation("androidx.security:security-crypto:1.1.0-alpha03")

    // android view related libs
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.2.0'

    // custom view related
    implementation 'me.drakeet.support:toastcompat:1.1.0'
    implementation 'com.davemorrissey.labs:subsampling-scale-image-view:3.10.0'

    implementation 'androidx.core:core-splashscreen:1.0.0-beta01'

    // firebase/google related libs
    implementation 'com.google.firebase:firebase-core:20.1.1'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.9'
    implementation 'com.google.firebase:firebase-analytics:20.1.1'
    // uses the "thin" variant, i.e. app size is reduced but dependencies are downloaded after app install.
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:18.0.0'

    // libs for document sync/export
    implementation 'com.itextpdf:itextg:5.5.10'
    implementation 'androidx.documentfile:documentfile:1.0.1'

    // networking lib retrofit
    def retrofit_version = "2.3.0"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofit_version
    implementation group: 'com.squareup.retrofit2', name: 'converter-gson', version: retrofit_version
    // okhttp client
    def okhttp_version = "4.9.1"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // android room DB
    def room_version = "2.4.2"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'androidx.work:work-runtime-ktx:2.7.1'

    // helper libs
    implementation 'com.github.hollaus:OpenCVLibrary:1.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    // we need this for the ProviderInstaller
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    // testing related libs
    // TODO: Most of the tests are commented and currently not working
    //    Took this lines from:
//    https://medium.com/androiddevelopers/write-once-run-everywhere-tests-on-android-88adb2ba20c5
    androidTestImplementation('androidx.test:runner:1.2.0')
    androidTestImplementation('androidx.test.ext:junit:1.1.1')
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.2.0')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0-alpha05')
    androidTestImplementation('androidx.test.ext:truth:1.2.0')
    testImplementation('org.robolectric:robolectric:4.3.1')
    testImplementation('org.robolectric:robolectric:4.3.1')
    implementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'it.xabaras.android.espresso:recyclerview-child-actions:1.0'

    android {
        testOptions.unitTests.includeAndroidResources = true
    }

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0-alpha05', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'androidx.test:rules:1.4.0-alpha05'
    androidTestImplementation "android.arch.core:core-testing:1.1.1"
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0-alpha05', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-core-utils'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}
repositories {
    mavenCentral()
}

apply plugin: 'com.google.gms.google-services'